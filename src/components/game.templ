package components

import (
	"code-root/src/assets"
	"code-root/src/game"
	"code-root/src/eventlog"
	"fmt"
	"strings"
)

templ FighterSides(gameState game.GameState, assets assets.Assets, events eventlog.FighterEventLog) {
	<div id="fighter-sides" class="flex flex-row justify-around align-around">
		<div 
			id="left-fighter-side" 
			class="flex flex-row h-screen w-6/12 align-center justify-evenly bg-gradient-to-t from-red-200 to-indigo-200 text-white text-center"
		>
			@FighterStats(gameState.LeftFighter)
			@FighterIcon(gameState.LeftFighter,true,assets)
		</div>
		<div 
			id="right-fighter-side" 
			class="flex flex-row h-screen w-6/12 align-center justify-evenly bg-gradient-to-t from-yellow-200 to-blue-200 text-white text-center"
		>
			@FighterIcon(gameState.RightFighter,false,assets)
			@FighterStats(gameState.RightFighter)
		</div>
	</div>
}

templ FighterStats(f game.Fighter) {
	<div 
		id={"FighterInner" + f.Name} 
		class="mt-32 flex flex-col align-center justify-center w-4/12 h-5/12 bg-gray-400 border border-4 border-black "
	>
		<div>
			{ f.Name }
		</div>
		<div>
			Health: 
			@ProgressBar(f.Health,f.MaxHealth)
		</div>
		<div>
			Damage: { f.Damage } </div>
		<div>
			Speed { f.Speed }
		</div>
		<div>
			Timer: 
			@ProgressBar(f.Timer,game.DEFAULT_TIMER)
		</div>
		<div>
			Accuracy: { strings.Split(fmt.Sprintf("%f",f.Accuracy * 100),".")[0] }% 
		</div> 
		<div>
			Crit: { strings.Split(fmt.Sprintf("%f",f.CritRate * 100),".")[0] }% 
		</div>
	</div>
}

templ FighterIcon(fighter game.Fighter, left bool, assets assets.Assets) {
	{{
		var animationName string
		var iconID string
		wounded := fighter.Health <= fighter.MaxHealth / 2
		var defaultAnim string = "bounce"
		if wounded {
			defaultAnim = "wounded"
		}

		var dir string
		if left {
			iconID = "left-fighter-icon"
			dir = "left"
		} else {
			iconID = "right-fighter-icon"
			dir = "right"
		}
		switch fighter.State {
			case game.READY:
				animationName = "animate-" + defaultAnim
			case game.ATTACKING:
				animationName = "animate-attack-" + dir
			case game.CRITTING:
				animationName = "animate-crit-" + dir
			case game.DEFENDING:
				animationName = "animate-defend-" + dir
			default:
				animationName = "animate-" + defaultAnim
		}
	}}
		<div 
			id={iconID}
			class={animationName + " mt-62"} 
		>
			@templ.Raw(assets.IconsSvgs[fighter.Name])
		</div>
}

templ EventLog(f eventlog.FighterEventLog) {
	<ul
		id="eventlog"
		class="fixed flex flex-col-reverse align-center justify-center bg-blue-300 left-4/12 bottom-1/12 w-4/12 h-2/12 border-10 border-color-black overflow-y-scroll overflow-x-auto"
	>
		for _, item := range f.Log {
			@EventInner(item)
		}
	</ul>
}

templ EventInner(text string) {
	<li>
		{text}
	</li>
}

templ Popup(info string) {
	<div>
		<p> {info} </p>
		<button> Close </button>
	</div>
}

templ ProgressBar(curr int, max int) {
	{{
		var diff int = max - curr
	}}
	<ul 
		id=""
		class="bg-white flex flex-row justify-evenly align-evenly"
	>
		for _ = range curr {
			<li class="w-2 h-2 bg-black border-1 border-white"></li>
		}
		for _ = range diff {
			<li class="w-2 h-2 bg-gray-300 border-1 border-white"></li>
		}
	</ul>
}

templ PopupSignup() {
	<div 
		id="popup" 
		class="bg-gray-300 z-10 flex justify-center align-center fixed w-8/12 h-8/12 top-1/4 left-1/4"
	>
		<h1> Sign up for JS.bet </h1>
		<form>
			<input type="text" name="username">
			<input type="text" name="password">
			<button type="button" data-on-click="@post('/user/signup','{contentType:'form'}')"></button>
		</form>
	</div>
}
templ PopupLogin() {
	<div 
		id="popup" 
		class="bg-gray-300 z-10 flex justify-center align-center fixed w-8/12 h-8/12 top-1/4 left-1/4"
	>
		<h1> Log in to JS.bet </h1>
		<form>
			<input type="text" name="username">
			<input type="text" name="password">
			<button type="button" data-on-click="@post('/user/signup','{contentType:'form'}')"></button>
		</form>
	</div>
}

templ PopupHidden() {
	<div id="popup" hidden ></div>
}
